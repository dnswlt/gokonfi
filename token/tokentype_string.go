// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unspecified-0]
	_ = x[Nil-1]
	_ = x[BoolLiteral-2]
	_ = x[IntLiteral-3]
	_ = x[DoubleLiteral-4]
	_ = x[StrLiteral-5]
	_ = x[FormatStrLiteral-6]
	_ = x[Plus-7]
	_ = x[Minus-8]
	_ = x[Times-9]
	_ = x[Div-10]
	_ = x[Modulo-11]
	_ = x[Equal-12]
	_ = x[NotEqual-13]
	_ = x[LessThan-14]
	_ = x[LessEq-15]
	_ = x[GreaterThan-16]
	_ = x[GreaterEq-17]
	_ = x[LogicalAnd-18]
	_ = x[LogicalOr-19]
	_ = x[BitwiseAnd-20]
	_ = x[BitwiseOr-21]
	_ = x[BitwiseXor-22]
	_ = x[ShiftLeft-23]
	_ = x[ShiftRight-24]
	_ = x[Dot-25]
	_ = x[Not-26]
	_ = x[Complement-27]
	_ = x[Merge-28]
	_ = x[Comma-29]
	_ = x[LeftParen-30]
	_ = x[RightParen-31]
	_ = x[LeftBrace-32]
	_ = x[RightBrace-33]
	_ = x[LeftSquare-34]
	_ = x[RightSquare-35]
	_ = x[Colon-36]
	_ = x[OfType-37]
	_ = x[Ident-38]
	_ = x[Func-39]
	_ = x[Let-40]
	_ = x[Template-41]
	_ = x[If-42]
	_ = x[Then-43]
	_ = x[Else-44]
	_ = x[EndOfInput-45]
}

const _TokenType_name = "UnspecifiedNilBoolLiteralIntLiteralDoubleLiteralStrLiteralFormatStrLiteralPlusMinusTimesDivModuloEqualNotEqualLessThanLessEqGreaterThanGreaterEqLogicalAndLogicalOrBitwiseAndBitwiseOrBitwiseXorShiftLeftShiftRightDotNotComplementMergeCommaLeftParenRightParenLeftBraceRightBraceLeftSquareRightSquareColonOfTypeIdentFuncLetTemplateIfThenElseEndOfInput"

var _TokenType_index = [...]uint16{0, 11, 14, 25, 35, 48, 58, 74, 78, 83, 88, 91, 97, 102, 110, 118, 124, 135, 144, 154, 163, 173, 182, 192, 201, 211, 214, 217, 227, 232, 237, 246, 256, 265, 275, 285, 296, 301, 307, 312, 316, 319, 327, 329, 333, 337, 347}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
