// Code generated by "stringer -type=TokenType"; DO NOT EDIT.

package token

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Unspecified-0]
	_ = x[NilLiteral-1]
	_ = x[BoolLiteral-2]
	_ = x[IntLiteral-3]
	_ = x[DoubleLiteral-4]
	_ = x[StrLiteral-5]
	_ = x[PlusOp-6]
	_ = x[MinusOp-7]
	_ = x[TimesOp-8]
	_ = x[DivOp-9]
	_ = x[Equal-10]
	_ = x[NotEqual-11]
	_ = x[LessThan-12]
	_ = x[LessEq-13]
	_ = x[GreaterThan-14]
	_ = x[GreaterEq-15]
	_ = x[Dot-16]
	_ = x[Not-17]
	_ = x[Comma-18]
	_ = x[LeftParen-19]
	_ = x[RightParen-20]
	_ = x[LeftBrace-21]
	_ = x[RightBrace-22]
	_ = x[Colon-23]
	_ = x[Ident-24]
	_ = x[Keyword-25]
	_ = x[EndOfInput-26]
}

const _TokenType_name = "UnspecifiedNilLiteralBoolLiteralIntLiteralDoubleLiteralStrLiteralPlusOpMinusOpTimesOpDivOpEqualNotEqualLessThanLessEqGreaterThanGreaterEqDotNotCommaLeftParenRightParenLeftBraceRightBraceColonIdentKeywordEndOfInput"

var _TokenType_index = [...]uint8{0, 11, 21, 32, 42, 55, 65, 71, 78, 85, 90, 95, 103, 111, 117, 128, 137, 140, 143, 148, 157, 167, 176, 186, 191, 196, 203, 213}

func (i TokenType) String() string {
	if i < 0 || i >= TokenType(len(_TokenType_index)-1) {
		return "TokenType(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _TokenType_name[_TokenType_index[i]:_TokenType_index[i+1]]
}
